#pragma once
#include "GameBoard.h"
#include "Move.h"
#include "Timer.h"
#include "SearchResult.h"
#include "TranspositionTable.h"

constexpr std::array<std::array<int, 64>, 7> bStartRewards = {
    {
        {
             0,   0,   0,   0,   0,   0,   0,   0,
            50,  50,  50,  50,  50,  50,  50,  50,
            10,  10,  20,  30,  30,  20,  10,  10,
             5,   5,  10,  25,  25,  10,   5,   5,
             0,   0,   0,  20,  20,   0,   0,   0,
             5,  -5, -10,   0,   0, -10,  -5,   5,
             5,  10,  10, -20, -20,  10,  10,   5,
             0,   0,   0,   0,   0,   0,   0,   0
        },
        {
            -50,-40,-30,-30,-30,-30,-40,-50,
            -40,-20,  0,  0,  0,  0,-20,-40,
            -30,  0, 10, 15, 15, 10,  0,-30,
            -30,  5, 15, 20, 20, 15,  5,-30,
            -30,  0, 15, 20, 20, 15,  0,-30,
            -30,  5, 10, 15, 15, 10,  5,-30,
            -40,-20,  0,  5,  5,  0,-20,-40,
            -50,-40,-30,-30,-30,-30,-40,-50,
        },
        {
            -20,-10,-10,-10,-10,-10,-10,-20,
            -10,  0,  0,  0,  0,  0,  0,-10,
            -10,  0,  5, 10, 10,  5,  0,-10,
            -10,  5,  5, 10, 10,  5,  5,-10,
            -10,  0, 10, 10, 10, 10,  0,-10,
            -10, 10, 10, 10, 10, 10, 10,-10,
            -10,  5,  0,  0,  0,  0,  5,-10,
            -20,-10,-10,-10,-10,-10,-10,-20,
        },
        {
            0,  0,  0,  0,  0,  0,  0,  0,
            5, 10, 10, 10, 10, 10, 10,  5,
            -5,  0,  0,  0,  0,  0,  0, -5,
            -5,  0,  0,  0,  0,  0,  0, -5,
            -5,  0,  0,  0,  0,  0,  0, -5,
            -5,  0,  0,  0,  0,  0,  0, -5,
            -5,  0,  0,  0,  0,  0,  0, -5,
            0,  0,  0,  5,  5,  0,  0,  0
        },
        {
            -20,-10,-10, -5, -5,-10,-10,-20,
            -10,  0,  0,  0,  0,  0,  0,-10,
            -10,  0,  5,  5,  5,  5,  0,-10,
            -5,   0,  5,  5,  5,  5,  0, -5,
            0,    0,  5,  5,  5,  5,  0, -5,
            -10,  5,  5,  5,  5,  5,  0,-10,
            -10,  0,  5,  0,  0,  0,  0,-10,
            -20,-10,-10, -5, -5,-10,-10,-20
        },
        {
            -80, -70, -70, -70, -70, -70, -70, -80,
            -60, -60, -60, -60, -60, -60, -60, -60,
            -40, -50, -50, -60, -60, -50, -50, -40,
            -30, -40, -40, -50, -50, -40, -40, -30,
            -20, -30, -30, -40, -40, -30, -30, -20,
            -10, -20, -20, -20, -20, -20, -20, -10,
            20,  20,  -5,  -5,  -5,  -5,  20,  20,
            20,  30,  10,   0,   0,  10,  30,  20
        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
        }
    }
};
constexpr std::array<std::array<int, 64>, 7> bEndRewards = {
    {
        {
             0,   0,   0,   0,   0,   0,   0,   0,
            80,  80,  80,  80,  80,  80,  80,  80,
            50,  50,  50,  50,  50,  50,  50,  50,
            30,  30,  30,  30,  30,  30,  30,  30,
            20,  20,  20,  20,  20,  20,  20,  20,
            10,  10,  10,  10,  10,  10,  10,  10,
            10,  10,  10,  10,  10,  10,  10,  10,
             0,   0,   0,   0,   0,   0,   0,   0
        },
        {
            -50,-40,-30,-30,-30,-30,-40,-50,
            -40,-20,  0,  0,  0,  0,-20,-40,
            -30,  0, 10, 15, 15, 10,  0,-30,
            -30,  5, 15, 20, 20, 15,  5,-30,
            -30,  0, 15, 20, 20, 15,  0,-30,
            -30,  5, 10, 15, 15, 10,  5,-30,
            -40,-20,  0,  5,  5,  0,-20,-40,
            -50,-40,-30,-30,-30,-30,-40,-50,
        },
        {
            -20,-10,-10,-10,-10,-10,-10,-20,
            -10,  0,  0,  0,  0,  0,  0,-10,
            -10,  0,  5, 10, 10,  5,  0,-10,
            -10,  5,  5, 10, 10,  5,  5,-10,
            -10,  0, 10, 10, 10, 10,  0,-10,
            -10, 10, 10, 10, 10, 10, 10,-10,
            -10,  5,  0,  0,  0,  0,  5,-10,
            -20,-10,-10,-10,-10,-10,-10,-20,
        },
        {
            0,  0,  0,  0,  0,  0,  0,  0,
            5, 10, 10, 10, 10, 10, 10,  5,
            -5,  0,  0,  0,  0,  0,  0, -5,
            -5,  0,  0,  0,  0,  0,  0, -5,
            -5,  0,  0,  0,  0,  0,  0, -5,
            -5,  0,  0,  0,  0,  0,  0, -5,
            -5,  0,  0,  0,  0,  0,  0, -5,
            0,  0,  0,  5,  5,  0,  0,  0
        },
        {
            -20,-10,-10, -5, -5,-10,-10,-20,
            -10,  0,  0,  0,  0,  0,  0,-10,
            -10,  0,  5,  5,  5,  5,  0,-10,
            -5,   0,  5,  5,  5,  5,  0, -5,
            -5,   0,  5,  5,  5,  5,  0, -5,
            -10,  0,  5,  5,  5,  5,  0,-10,
            -10,  0,  0,  0,  0,  0,  0,-10,
            -20,-10,-10, -5, -5,-10,-10,-20
        },
        {
            -20, -10, -10, -10, -10, -10, -10, -20,
            -5,   0,   5,   5,   5,   5,   0,  -5,
            -10, -5,   20,  30,  30,  20,  -5, -10,
            -15, -10,  35,  45,  45,  35, -10, -15,
            -20, -15,  30,  40,  40,  30, -15, -20,
            -25, -20,  20,  25,  25,  20, -20, -25,
            -30, -25,   0,   0,   0,   0, -25, -30,
            -50, -30, -30, -30, -30, -30, -30, -50
        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
        }
    }
};
constexpr std::array<std::array<int, 64>, 7> wStartRewards = {
    {
        {
                0,      0,      0,      0,      0,      0,      0,      0,
                5,      10,     10,     -20,    -20,    10,     10,     5,
                5,      -5,     -10,    0,      0,      -10,    -5,     5,
                0,      0,      0,      20,     20,     0,      0,      0,
                5,      5,      10,     25,     25,     10,     5,      5,
                10,     10,     20,     30,     30,     20,     10,     10,
                50,     50,     50,     50,     50,     50,     50,     50,
                0,      0,      0,      0,      0,      0,      0,      0,
        },
        {
                -50,    -40,    -30,    -30,    -30,    -30,    -40,    -50,
                -40,    -20,    0,      5,      5,      0,      -20,    -40,
                -30,    5,      10,     15,     15,     10,     5,      -30,
                -30,    0,      15,     20,     20,     15,     0,      -30,
                -30,    5,      15,     20,     20,     15,     5,      -30,
                -30,    0,      10,     15,     15,     10,     0,      -30,
                -40,    -20,    0,      0,      0,      0,      -20,    -40,
                -50,    -40,    -30,    -30,    -30,    -30,    -40,    -50,
        },
        {
                -20,    -10,    -10,    -10,    -10,    -10,    -10,    -20,
                -10,    5,      0,      0,      0,      0,      5,      -10,
                -10,    10,     10,     10,     10,     10,     10,     -10,
                -10,    0,      10,     10,     10,     10,     0,      -10,
                -10,    5,      5,      10,     10,     5,      5,      -10,
                -10,    0,      5,      10,     10,     5,      0,      -10,
                -10,    0,      0,      0,      0,      0,      0,      -10,
                -20,    -10,    -10,    -10,    -10,    -10,    -10,    -20,
        },
        {
                0,      0,      0,      5,      5,      0,      0,      0,
                -5,     0,      0,      0,      0,      0,      0,      -5,
                -5,     0,      0,      0,      0,      0,      0,      -5,
                -5,     0,      0,      0,      0,      0,      0,      -5,
                -5,     0,      0,      0,      0,      0,      0,      -5,
                -5,     0,      0,      0,      0,      0,      0,      -5,
                5,      10,     10,     10,     10,     10,     10,     5,
                0,      0,      0,      0,      0,      0,      0,      0,
        },
        {
                -20,    -10,    -10,    -5,     -5,     -10,    -10,    -20,
                -10,    0,      5,      0,      0,      0,      0,      -10,
                -10,    5,      5,      5,      5,      5,      0,      -10,
                0,      0,      5,      5,      5,      5,      0,      -5,
                -5,     0,      5,      5,      5,      5,      0,      -5,
                -10,    0,      5,      5,      5,      5,      0,      -10,
                -10,    0,      0,      0,      0,      0,      0,      -10,
                -20,    -10,    -10,    -5,     -5,     -10,    -10,    -20,
        },
        {
                20,     30,     10,     0,      0,      10,     30,     20,
                20,     20,     -5,     -5,     -5,     -5,     20,     20,
                -10,    -20,    -20,    -20,    -20,    -20,    -20,    -10,
                -20,    -30,    -30,    -40,    -40,    -30,    -30,    -20,
                -30,    -40,    -40,    -50,    -50,    -40,    -40,    -30,
                -40,    -50,    -50,    -60,    -60,    -50,    -50,    -40,
                -60,    -60,    -60,    -60,    -60,    -60,    -60,    -60,
                -80,    -70,    -70,    -70,    -70,    -70,    -70,    -80,
        },
        {
                0,      0,      0,      0,      0,      0,      0,      0,
                0,      0,      0,      0,      0,      0,      0,      0,
                0,      0,      0,      0,      0,      0,      0,      0,
                0,      0,      0,      0,      0,      0,      0,      0,
                0,      0,      0,      0,      0,      0,      0,      0,
                0,      0,      0,      0,      0,      0,      0,      0,
                0,      0,      0,      0,      0,      0,      0,      0,
                0,      0,      0,      0,      0,      0,      0,      0,
        }
    }
};
constexpr std::array<std::array<int, 64>, 7> wEndRewards = {
    {
        {
                0,      0,      0,      0,      0,      0,      0,      0,
                10,     10,     10,     10,     10,     10,     10,     10,
                10,     10,     10,     10,     10,     10,     10,     10,
                20,     20,     20,     20,     20,     20,     20,     20,
                30,     30,     30,     30,     30,     30,     30,     30,
                50,     50,     50,     50,     50,     50,     50,     50,
                80,     80,     80,     80,     80,     80,     80,     80,
                0,      0,      0,      0,      0,      0,      0,      0,
        },
        {
                -50,    -40,    -30,    -30,    -30,    -30,    -40,    -50,
                -40,    -20,    0,      5,      5,      0,      -20,    -40,
                -30,    5,      10,     15,     15,     10,     5,      -30,
                -30,    0,      15,     20,     20,     15,     0,      -30,
                -30,    5,      15,     20,     20,     15,     5,      -30,
                -30,    0,      10,     15,     15,     10,     0,      -30,
                -40,    -20,    0,      0,      0,      0,      -20,    -40,
                -50,    -40,    -30,    -30,    -30,    -30,    -40,    -50,
        },
        {
                -20,    -10,    -10,    -10,    -10,    -10,    -10,    -20,
                -10,    5,      0,      0,      0,      0,      5,      -10,
                -10,    10,     10,     10,     10,     10,     10,     -10,
                -10,    0,      10,     10,     10,     10,     0,      -10,
                -10,    5,      5,      10,     10,     5,      5,      -10,
                -10,    0,      5,      10,     10,     5,      0,      -10,
                -10,    0,      0,      0,      0,      0,      0,      -10,
                -20,    -10,    -10,    -10,    -10,    -10,    -10,    -20,
        },
        {
                0,      0,      0,      5,      5,      0,      0,      0,
                -5,     0,      0,      0,      0,      0,      0,      -5,
                -5,     0,      0,      0,      0,      0,      0,      -5,
                -5,     0,      0,      0,      0,      0,      0,      -5,
                -5,     0,      0,      0,      0,      0,      0,      -5,
                -5,     0,      0,      0,      0,      0,      0,      -5,
                5,      10,     10,     10,     10,     10,     10,     5,
                0,      0,      0,      0,      0,      0,      0,      0,
        },
        {
                -20,    -10,    -10,    -5,     -5,     -10,    -10,    -20,
                -10,    0,      0,      0,      0,      0,      0,      -10,
                -10,    0,      5,      5,      5,      5,      0,      -10,
                -5,     0,      5,      5,      5,      5,      0,      -5,
                -5,     0,      5,      5,      5,      5,      0,      -5,
                -10,    0,      5,      5,      5,      5,      0,      -10,
                -10,    0,      0,      0,      0,      0,      0,      -10,
                -20,    -10,    -10,    -5,     -5,     -10,    -10,    -20,
        },
        {
                -50,    -30,    -30,    -30,    -30,    -30,    -30,    -50,
                -30,    -25,    0,      0,      0,      0,      -25,    -30,
                -25,    -20,    20,     25,     25,     20,     -20,    -25,
                -20,    -15,    30,     40,     40,     30,     -15,    -20,
                -15,    -10,    35,     45,     45,     35,     -10,    -15,
                -10,    -5,     20,     30,     30,     20,     -5,     -10,
                -5,     0,      5,      5,      5,      5,      0,      -5,
                -20,    -10,    -10,    -10,    -10,    -10,    -10,    -20,
        },
        {
                0,      0,      0,      0,      0,      0,      0,      0,
                0,      0,      0,      0,      0,      0,      0,      0,
                0,      0,      0,      0,      0,      0,      0,      0,
                0,      0,      0,      0,      0,      0,      0,      0,
                0,      0,      0,      0,      0,      0,      0,      0,
                0,      0,      0,      0,      0,      0,      0,      0,
                0,      0,      0,      0,      0,      0,      0,      0,
                0,      0,      0,      0,      0,      0,      0,      0,
        }
    }
};

constexpr std::array<int, 7> rawPieceValues = {
    100, 320, 330, 500, 900, 0, 0
};
constexpr std::array<int, 7> endgameValues = {
    0, 3, 3, 5, 9, 0, 0
};

struct Engine
{
	Engine(GameBoard& b);
	GameBoard board;
    Timer timer;
    int maxDepthDefault;
    TranspositionTable* TT;
    bool ttMode; // if false - disallows TT access. used to prevent 3 fold repetition and 50 move rule draws
    std::vector<Move> history;
    void updateTTmode();
    SearchResult search(int depth, int alpha, int beta, long& nodesOnDepth, long& movesOnDepth, int& positionOnDepth, long& ttHit);
    SearchResult searchWithoutTT(int depth, int alpha, int beta);
    SearchResult quiescenceSearch(int alpha, int beta);
    //SearchResult bestOnDepth(std::vector<Move>& moves, uint64_t key, int depth, long& nodesOnDepth, long& movesOnDepth, int& positionOnDepth);
    SearchResult iterativeDeepening(int maxDepth, bool useTimer);
	int evaluate();
	int calcWhiteScore();
	int calcBlackScore();
	int calcWhiteAwards(float coeff);
	int calcBlackAwards(float coeff);
	float calcEndgameCoeff();
    int activeKingAward(float coeff); 
	void orderMoves(std::vector<Move>& moves, uint64_t positionKey);
	void start();
    const int checkmateScore = 30000;

    bool validateMove(Move& m, std::string input);
    bool isLegal(Move& current, std::vector<Move> &legals);
    void printMoves(std::vector<Move>& moves);

    void xperft(int depth);

    void endGame();
    bool isDrawByIM();

    void showBestLine(std::vector<Move> line);

    unsigned long index_from_notation(std::string str);
    std::string notation_from_index(unsigned long index);
    Move move_from_notation(std::string input);
    std::string notation_from_move(Move& m);

    void printEval(int eval);
    void out(Bitboard bb);
};

